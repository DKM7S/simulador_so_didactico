from memoria.bloque import Bloque

class GestorMemoria:
    def __init__(self, tama√±o_total, tama√±o_bloque):
        self.tama√±o_total = tama√±o_total
        self.tama√±o_bloque = tama√±o_bloque
        self.bloques = []
        self.tabla_paginas = {}  # proceso_id ‚Üí {pagina_id: inicio_bloque}
        self._crear_bloques()

    def _crear_bloques(self):
        num_bloques = self.tama√±o_total // self.tama√±o_bloque
        for i in range(num_bloques):
            inicio = i * self.tama√±o_bloque
            bloque = Bloque(inicio, self.tama√±o_bloque)
            self.bloques.append(bloque)

    def asignar(self, proceso):
        """Asigna p√°ginas del proceso a bloques libres."""
        id_proceso = proceso["id"]
        num_paginas = proceso["num_paginas"]
        self.tabla_paginas[id_proceso] = {}

        asignadas = 0
        for bloque in self.bloques:
            if not bloque.ocupado and asignadas < num_paginas:
                bloque.asignar_pagina(f"{id_proceso}:{asignadas}")
                self.tabla_paginas[id_proceso][asignadas] = bloque.inicio
                asignadas += 1

        if asignadas < num_paginas:
            print(f"‚ö†Ô∏è Proceso {id_proceso} no pudo asignar todas sus p√°ginas ({asignadas}/{num_paginas})")
        else:
            print(f"‚úÖ Proceso {id_proceso} asignado completamente ({num_paginas} p√°ginas)")

    def mostrar_tabla_paginas(self):
        print("\nüìã Tabla de P√°ginas:")
        for pid, paginas in self.tabla_paginas.items():
            print(f"Proceso {pid}:")
            for pag, inicio in paginas.items():
                print(f"  P√°gina {pag} ‚Üí Bloque en {inicio}")

    def visualizar_ascii(self):
        print("\nüß± Estado de los bloques:")
        for bloque in self.bloques:
            if bloque.ocupado:
                print(f"[{bloque.inicio}] P√°gina {bloque.pagina_asignada}")
            else:
                print(f"[{bloque.inicio}] Libre")